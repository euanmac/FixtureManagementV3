@page "/gameweek"
@preservewhitespace true
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations
@using FixtureManagementV3.Components.Helper

@implements IAsyncDisposable
@inject IDbContextFactory<AppDBContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject FullTimeReconciliationService FullTimeReconciliationService;
@inject PageHistoryService PageHistoryService;

@attribute [StreamRendering]
<PageTitle>Gameweek</PageTitle>

<h1>Gameweek</h1>
<hr>
@* <div class="container"> *@
    <div class="row">
        <div class="col">
            <h3>@(gameWeekStart.ToString("dddd, d MMMM yyyy")) to @(gameWeekEnd.ToString("dddd, d MMMM yyyy"))</h3>
        </div>
        <div class="col text-end">
                <button class="btn btn-secondary" type="button" onclick="location.href='./gameweek'">today</button>
                <div class="btn-group">
                    <button class="btn btn-dark" type="button" aria-label="prevSat" onclick="location.href='./gameweek?matchday=@(gameWeekStart.AddDays(-7).ToString("dd-MMM-yyyy"))'">
                        <i class="bi bi-chevron-left align-middle" data-toggle="tooltip" data-original-title=""></i>
                    </button>
                    <button class="btn btn-dark" type="button" aria-label="nextSat" onclick="location.href='./gameweek?matchday=@(gameWeekStart.AddDays(+7).ToString("dd-MMM-yyyy"))'">
                        <i class="bi bi-chevron-right align-middle" data-toggle="tooltip" data-original-title=""></i>
                    </button>
                </div>
        </div>
    </div>
    @if (isAuthenticated) 
    {
        <div class="row my-2 g-1">
            <div class="col-auto">
                <EditForm OnSubmit="FixturesAction" FormName="Action" Model="fixtureRecResults" enhance>
                    @* <input type="hidden" name="DownloadFixtures"  @value="DownloadFixtures" /> *@
                    <button type="submit" class="btn btn-primary" disabled="@(buttonsDisabled || (downloadCount == 0))" value="@Action.Download">Download @(downloadCount)</button>
                    <button type="submit" class="btn btn-primary" disabled="@(buttonsDisabled || (unconfirmedCount == 0))" name="FormAction" value="@Action.Confirm">Confirm @(unconfirmedCount)</button>
                    <button type="submit" class="btn btn-primary" disabled="@(buttonsDisabled || (unmatchedCount ==0))" name="FormAction" value="@Action.Delete">Delete Unmatched</button>
                    <button type="submit" class="btn btn-primary" disabled="@buttonsDisabled" name="FormAction" value="@Action.Update">Update</button>

                </EditForm>
            </div>
            <div class="col-auto">
                <EditForm OnSubmit="ClearCache" FormName="ClearCache" Model="this" enhance>
                </EditForm>
            </div>
        
        @* <div class="col">
            @if (isAuthenticated) {            
                @((TimeOnly.FromDateTime(DateTime.Now) - start).TotalMilliseconds)                
            }
        </div> *@
        </div>
    }
@* </div> *@
    <table class="table table-sm table-stripedx quickgrid">
        <thead>
            <tr>
                <th>
                    Team
                </th>
                <th>
                    Date
                </th>
                <th>
                    Status
                </th>
                <th>
                    Venue
                </th>
                <th>
                    Type
                </th>
                <th>
                    Opponent
                </th>
                <th>
                    Pitch
                </th>
                <th>
                    Start
                </th>
                <th>
                    Confirmed
                </th>
                @if (isAuthenticated)
                {
                    <th></th>
                }
            </tr>
        </thead>
        <tbody>
            @{stripe = false;}
            @foreach (var team in fixtureRecResults.Keys)
            {
                var rowColour = stripe ? bgTableBgStriped : bgTableBg;
                var newRow = true;
                stripe = !stripe;
                @foreach (var item in fixtureRecResults[team])
                {
                    <tr>
                        <td style="@($"background-color: var({rowColour})")">
                            @*@Html.DisplayFor(modelItem => item.GroupDescription)*@
                            @if (newRow)
                            {
                                <a href="@($"teams/details?id={team.Id}")">@team.DisplayName</a>
                            }
                        </td>
                        <td style="@($"background-color: var({rowColour})")">
                            @item.MatchDate.ToShortDateString()
                        </td>
                        <td class="text-center align-middle" style="@($"background-color: var({rowColour})")">
                            <i class="@item.GetRecIcon() align-middle" data-toggle="tooltip" data-original-title="@item.RecStatus"></i>
                        </td>
                        @if (item.RecStatus != Models.FixtureRecMatchType.noFixture && item.RecStatus != Models.FixtureRecMatchType.pending)
                        {
                            <td style="@($"background-color: var({rowColour})")">
                                @item.Venue
                            </td>
                            <td style="@($"background-color: var({rowColour})")">
                                @item.FixtureType
                            </td>
                            <td style="@($"background-color: var({rowColour})")">
                                @item.Opponent
                            </td>
                            @if (item.IsAllocated)
                            {
                                <td style="@($"background-color: var({rowColour})")">
                                    @item.Pitch
                                </td>
                                <td style="@($"background-color: var({rowColour})")">
                                    @(item.Start.ToShortTimeString())
                                </td>
                                <td style="@($"background-color: var({rowColour})")">
                                    @(item.IsAllocated && item.IsConfirmed ? "Yes" : "No")
                                </td>
                            }
                            else
                            {
                                <td style="@($"background-color: var({rowColour})")"/>
                                <td style="@($"background-color: var({rowColour})")"/>
                                <td style="@($"background-color: var({rowColour})")"/>
                            }
                        }
                        else
                        {
                            <td style="@($"background-color: var({rowColour})")"/>
                            <td style="@($"background-color: var({rowColour})")"/>
                            <td style="@($"background-color: var({rowColour})")"/>
                            <td style="@($"background-color: var({rowColour})")"/>
                            <td style="@($"background-color: var({rowColour})")"/>
                            <td style="@($"background-color: var({rowColour})")"/>
                        }

                        @if (isAuthenticated)
                        {
                            <td style="@($"background-color: var({rowColour})")">

                                @if (item.RecStatus == Models.FixtureRecMatchType.fullTimeUnmatched)
                                {
                                    <EditForm method="post" Model="item" OnSubmit="DownloadFixture" FormName="@(item.Id.ToString())" Enhance>
                                        <input type="hidden" name="downloadFixture.Id" value="@item.Id" />
                                        <input type="hidden" name="downloadFixture.Date" value="@item.MatchDate.ToString("yyyy-MMM-dd")" />
                                        <input type="hidden" name="downloadFixture.IsHome" value="@(item.Venue == "H") " />
                                        <input type="hidden" name="downloadFixture.Opponent" value="@item.Opponent" />
                                        <input type="hidden" name="downloadFixture.FixtureType" value="@item.FixtureType" />
                                        <input type="hidden" name="downloadFixture.TeamId" value="@team.Id" />
                                        @* <button type="submit" class="btn btn-link">
                                            <i class="bi bi-cloud-arrow-down"></i>
                                        </button>s *@
                                        <button type="submit" style="border: none; background-color: transparent" class="btn-link">
                                            <i class ="bi bi-cloud-arrow-down"/>   
                                        </button>
                                    </EditForm>
                                }
                                @if (item.RecStatus != Models.FixtureRecMatchType.fullTimeUnmatched && item.RecStatus != Models.FixtureRecMatchType.noFixture && item.RecStatus != Models.FixtureRecMatchType.pending)
                                {


                                    <a href="@(ActionURL("edit", item.Id))"><Icon Type="Icon.IconType.Edit"/></a>
                                    <a href="@(ActionURL("delete", item.Id))"><Icon Type="Icon.IconType.Delete"/></a>        
                                    @if (item.CanAllocate) {
                                        <a href="@(ActionURL("allocate", item.Id))"><Icon Type="Icon.IconType.Schedule"/></a>
                                    }
                                    @if (item.IsAllocated)
                                    {
                                        @*Hidden fields for bulk confirmation*@
                                        <input type="hidden" name="ConfirmAllocations.Index" value="@item.AllocationId" />
                                        <input type="hidden" name="ConfirmAllocations[@item.AllocationId]" value="@item.AllocationId" />
                                    }
 
                                }

                                @*|*@
                                @*<a asp-page="./Delete" asp-route-id="@item.Team.Id"><i class="bi bi-trash"></i></a>*@
                            </td>
                        }
                        @{newRow = false;}
                    </tr>
                }
            }
        </tbody>
    </table>

@code {

    private enum Action { 
        Download, 
        Delete, 
        Update,
        Confirm
    }

    [SupplyParameterFromForm]
    private Action FormAction {get; set;}= Action.Update;
    [SupplyParameterFromForm]
    private Fixture? downloadFixture {get; set;}

    private AppDBContext context = default!;
    private bool isAuthenticated = false;
    private bool stripe = false;
    private string bgTableBg = "--bs-table-bg";
    private string bgTableBgStriped = "--bs-table-striped-bg";
    private bool buttonsDisabled = true;
    private int downloadCount;
    private int unconfirmedCount;
    private int unmatchedCount;

 
    public Dictionary<Team, List<TeamReconiliationRow>> fixtureRecResults {get; set;} = new();

    private DateOnly gameWeekEnd;
    private DateOnly gameWeekStart;

    [SupplyParameterFromQuery]
    private DateOnly? matchDay { get; set; }
    
    protected override async Task OnInitializedAsync()    
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = (user.Identity is not null && user.Identity.IsAuthenticated);
        
        context = DbFactory.CreateDbContext();
        //If not provided default matchday to today
        matchDay ??= DateOnly.FromDateTime(DateTime.Now);
        DayOfWeek dayOfWeek = matchDay.Value.DayOfWeek;

        //Calculate Gameweek Start and end Dates
        int startOffset = (dayOfWeek == DayOfWeek.Sunday) ? 6 : (int)dayOfWeek - 1;
        int endOffset = (dayOfWeek == DayOfWeek.Sunday) ? 0 : 7 - (int)dayOfWeek;
        gameWeekStart = matchDay.Value.AddDays(-startOffset);
        gameWeekEnd = matchDay.Value.AddDays(endOffset);

        //Get fixtures for given date
        List<Fixture> fixtures = await context.Fixture
            .Include(f => f.FixtureAllocation)
                .ThenInclude(fa => fa!.Pitch)
            .Include(f => f.Team)
                .ThenInclude(t => t!.Contacts)
                    .ThenInclude(c => c.Person)
            .Where(f => f.Date >= gameWeekStart && f.Date <= gameWeekEnd)
            .ToListAsync();

        //Get teams
        List<Team> teams = await context.Team.ToListAsync();
        
        
        //Get placeholder reconciliation rows for each team
        List<List<TeamReconiliationRow>> rows = teams
                .Select(t => new List<TeamReconiliationRow> { new TeamReconiliationRow { Team = t, MatchDate = gameWeekStart, RecStatus = FixtureRecMatchType.pending }})
                .ToList();

        fixtureRecResults = rows
                .SelectMany(x => x)
                    .OrderBy(x => x.Team.AgeGroup)
                        .ThenBy(x => x.Team.Gender)
                        .ThenBy(x => x.Team.Division)
                .ToList()
                .GroupBy(r => r.Team).ToDictionary(g => g.Key, g => g.ToList());

        StateHasChanged();

        //For each team reconcile the fixtures for a given date
        //Will be asynchronous so update state on each result returned
        await foreach (var row in FullTimeReconciliationService.Reconcile(teams, fixtures, gameWeekStart, gameWeekEnd)) {
            
            if (row.Count > 0) {
                fixtureRecResults[row[0].Team] = row;

            } else {
                fixtureRecResults.Remove(row[0].Team);
            }

            downloadCount = fixtureRecResults.Values.SelectMany(x => x).Count(f => f.RecStatus == FixtureRecMatchType.fullTimeUnmatched);
            unconfirmedCount = fixtureRecResults.Values.SelectMany(x => x).Count(f => f.IsAllocated && !f.IsConfirmed);
            unmatchedCount = fixtureRecResults.Values.SelectMany(x => x).Count(f => f.RecStatus == FixtureRecMatchType.localFixtureUnmatched);
            StateHasChanged();
        }
        buttonsDisabled = false;
    }

    public void ClearCache() {
        FullTimeReconciliationService.ClearCache();
        NavigationManager.NavigateTo($"/gameweek?matchday={matchDay!.Value.ToString("dd-MMM-yyyy")}");
    }

    public void FixturesAction()
    {
        using var context = DbFactory.CreateDbContext();
        
        switch (FormAction) 
        {
            case Action.Download:
                //Download fixtures
                DownloadAllFixtures();
                break;

            case Action.Delete:
                //Delete unmatched fixtures
                DeleteUnmatchedFixtures();
                break;
            
            case Action.Update:
                FullTimeReconciliationService.ClearCache();
                break;

            case Action.Confirm:
                //Confirm all allocations
                ConfirmAll();
                break;
        }
        NavigationManager.NavigateTo($"/gameweek?matchday={matchDay!.Value.ToString("dd-MMM-yyyy")}");
    }

    private void DeleteUnmatchedFixtures()
    {
        using var context = DbFactory.CreateDbContext();
        foreach (TeamReconiliationRow rec in fixtureRecResults.Values.SelectMany(x => x).Where(f => f.RecStatus == FixtureRecMatchType.localFixtureUnmatched)) {
            context.Fixture.Remove(new Fixture {Id = rec.Id});
            context.SaveChangesAsync();
        }

    }

    private void ConfirmAll()
    {
        using var context = DbFactory.CreateDbContext();
        foreach (TeamReconiliationRow rec in fixtureRecResults.Values.SelectMany(x => x).Where(f => (f.IsAllocated && !f.IsConfirmed))) {
            context.FixtureAllocation.Where(fa => fa.Id == rec.AllocationId).First().IsConfirmed = true;
            context.SaveChangesAsync();
        }

    }

    private void DownloadAllFixtures() {
        using var context = DbFactory.CreateDbContext();

        foreach (TeamReconiliationRow rec in fixtureRecResults.Values.SelectMany(x => x).Where(f => f.RecStatus == FixtureRecMatchType.fullTimeUnmatched)) {

            context.Fixture.Add((new Fixture {Id = Guid.NewGuid(), Date = rec.MatchDate, IsHome = rec.Venue == "H", Opponent = rec.Opponent, FixtureType = rec.FixtureType, TeamId = rec.Team.Id}));
            context.SaveChangesAsync();
        }
    }
    
    private async Task DownloadFixture()
    {
        if (downloadFixture is not null)
        {
            using var context = DbFactory.CreateDbContext();
            context.Fixture.Add(downloadFixture!);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo($"/gameweek?matchday={matchDay!.Value.ToString("dd-MMM-yyyy")}");
        }
    }

    private string ActionURL(string action, Guid id) => $"fixtures/{action}?id={id.ToString()}&returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}";

    public async ValueTask DisposeAsync() 
    {
        await context.DisposeAsync();
    }
}