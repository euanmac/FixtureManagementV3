@page "/fixtures/edit"

@inject IDbContextFactory<AppDBContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

@if (Fixture is null)
{
    <h2>Fixture</h2>
    <hr />
    <p><em>Loading...</em></p>
}
else
{   
    <hr />
    var team = Fixture.Team?.DisplayName ?? "Team X";
    <h3>@team</h3>
    <hr />
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Fixture" OnValidSubmit="UpdateFixture" FormName="edit" Enhance>
                
                <DataAnnotationsValidator />
                <input type="hidden" name="Fixture.TeamId" @bind-value="@Fixture.TeamId" />
                <input type="hidden" name="Fixture.Id" @bind-value="@Fixture.Id" @/>
                <div class="mb-3 form-floating">
                    <InputDate id="date" autofocus @bind-Value="Fixture.Date" class="form-control" />
                    <label for="date" class="form-label">Date</label>
                    <ValidationMessage For="() => Fixture.Date" class="text-danger" />
                </div>
                <div class="mb-2 form-check">
                    <label for="ishome" class="form-label">Home</label>
                    <InputCheckbox id="ishome" @bind-Value="Fixture.IsHome" class="form-check-input" />
                </div>
                <div class="mb-3 form-floating">
                    <InputSelect id="fixturetype" @bind-Value="Fixture.FixtureType" class="form-control form-select"> 
                        @foreach (var ftype in Enum.GetValues(typeof(FixtureType)))
                        {
                            <option value="@ftype">@ftype</option>
                        }
                    </InputSelect>
                    <label for="fixturetype" class="form-label">Fixture Type</label>
                </div> 
                <div class="mb-3 form-floating">                
                    <InputText id="opponent" @bind-Value="Fixture.Opponent" class="form-control" placeholder=" " aria-required="true"/>
                    <label for="opponent" class="form-label">Opponent</label>
                    <ValidationMessage For="() => Fixture.Opponent" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
                <a class="btn btn-secondary" href="#" onclick="history.back()">Back</a>

            </EditForm>
        </div>
    </div>
}


@code {
    [SupplyParameterFromQuery]
    private System.Guid Id { get; set; }

    [SupplyParameterFromForm]
    private Fixture? Fixture { get; set; }
 
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Fixture ??= await context.Fixture
            .Include(f=> f.Team)
            .FirstOrDefaultAsync(f => f.Id == Id);
        if (Fixture is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateFixture()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Fixture!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!FixtureExists(Fixture!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/fixtures");
    }

    private bool FixtureExists(System.Guid id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Fixture.Any(e => e.Id == id);
    }

}
