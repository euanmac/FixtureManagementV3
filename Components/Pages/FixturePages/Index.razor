@page "/fixtures"
@page "/"

@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using FixtureManagementV3.Models
@using FixtureManagementV3.ViewModels
@using FixtureManagementV3.Data
@using FixtureManagementV3.Components.Helper
@using System.Linq

@implements IAsyncDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<AppDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Fixtures</PageTitle>

<h1>Fixtures</h1>

<hr>
<div class="row align-items-center g-4">
    <div class="col-auto">
      <EditForm FormName="FilterFixtures" Model="Filter" method="post" class="form-inline" OnSubmit="FilterFixtures" Enhance>
        <div class="row g-3 align-items-center">
          <div class="col-auto">
            <div class="form-floating">
              <InputDate id="startDate" @bind-Value="Filter!.StartDate" class="form-control form-control" placeholder="29/02/1976"/>
              <label for="startDate">Start Date</label>
            </div>
          </div>
          <div class="col-auto">
              <div class="form-floating">
                  <InputDate id="endDate" @bind-Value="Filter!.EndDate" class="form-control form-control" placeholder="29/02/1976"/>
                  <label for="endDate">End Date</label>
              </div
          </div>
          <div class="col-auto">
              <label>Home</label>
              <InputCheckbox type="checkbox" id="ishome" @bind-Value="Filter!.IncludeHome"class="form-check-input"/>
              
          @* </div>
          <div class="col-auto"> *@
              <label autocomplete="off">Away</label>
              <InputCheckbox  id="isaway" @bind-Value="Filter!.IncludeAway" class="form-check-input"/>  
          </div>
          <div class="col-auto">
              <button type="submit" value="Filter" class="btn btn btn-outline-primary">Filter</button>
              <button class="btn btn btn-outline-secondary" onclick="document.getElementById('fixtures').classList.toggle('table-striped')">Reset</button>
          </div>
        </div>
      </EditForm>
  </div>
  <div class="col-auto">
     <forn>
       <div class="row g-3 align-items-center">
        <div class="col-auto">
            @if (isAuthenticated) {
                <a href="fixtures/create" class="btn btn btn-primary">Add <Icon Type="Icon.IconType.Add"/></a> 
                <button class="btn btn btn-primary" onclick="document.getElementById('fixtures').classList.toggle('table-striped')"><Icon Type="Icon.IconType.Download"/> Download</button>
            }
        </div>
      </div>
     </forn>
  </div>
</div>



<hr/>
<div class="mt-2">
    <FixtureGrid CanEdit="@isAuthenticated" Fixtures="@fixturesVM" TeamHidden="false"/>
</div>

@* <script>
function Filter() {
  // Declare variables
  var input, filter, table, tr, td, i, txtValue;
  input = document.getElementById("startDate");
  startDate = Date.parse(input.value);
  table = document.getElementById("fixtures");
  tr = table.getElementsByTagName("tr");

  // Loop through all table rows, and hide those who don't match the search query
  for (i = 0; i < tr.length; i++) {
    td = tr[i].getElementsByTagName("td")[0];
    if (td) {
      fixtureDate = Date.parse(td.textContent || td.innerText);
      if (txtValue > startDate) {
        tr[i].style.display = "";
      } else {
        tr[i].style.display = "none";
      }
    }
  }
}
</script> *@
@code {

    private AppDBContext context = default!;
    private IQueryable<FixtureViewModel> fixturesVM = default!; //Enumerable.Empty<FixtureViewModel>().AsQueryable();
    
    [SupplyParameterFromForm (FormName="FilterFixtures")]
    private FilterContext? Filter {get; set;}
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()    
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = (user.Identity is not null && user.Identity.IsAuthenticated);

        context = DbFactory.CreateDbContext();
        Filter ??= new FilterContext{StartDate = DateOnly.FromDateTime(DateTime.Now), EndDate = DateOnly.FromDateTime(DateTime.Now).AddDays(14)};

        fixturesVM = (await context.Fixture
                .Include(f => f.Team)
                .Include(f => f.FixtureAllocation)
                    .ThenInclude(fa => fa!.Pitch)
                .OrderBy(f => f.Date)
                    .ThenBy(f => f.Team!.AgeGroup)
                .Where(f => (f.Date >= Filter.StartDate && f.Date <= Filter.EndDate))
                .Where(f => f.IsHome == Filter.IncludeHome || f.IsHome != Filter.IncludeAway)
                .ToListAsync())
                .Select(f => new FixtureViewModel(f, true))
                .AsQueryable();
    }

    private void FilterFixtures() {
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    public class FilterContext {
        public bool IncludeHome {get; set;} = true;
        public bool IncludeAway {get; set;} = false;
        public DateOnly StartDate { get; set; }
        public DateOnly EndDate {get; set;}
    }    
}