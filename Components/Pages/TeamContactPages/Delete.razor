@page "/teamcontacts/delete"

@inject IDbContextFactory<AppDBContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>TeamContact</h2>
    <hr />
    @if (teamcontact is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">PersonId</dt>
            <dd class="col-sm-10">@teamcontact.PersonId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TeamId</dt>
            <dd class="col-sm-10">@teamcontact.TeamId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ContactType</dt>
            <dd class="col-sm-10">@teamcontact.ContactType</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Person</dt>
            <dd class="col-sm-10">@teamcontact.Person</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Team</dt>
            <dd class="col-sm-10">@teamcontact.Team</dd>
        </dl>
        <EditForm method="post" Model="teamcontact" OnValidSubmit="DeleteTeamContact" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(teamcontact is null)">Delete</button> |
            <a href="/teamcontacts">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private TeamContact? teamcontact;

    [SupplyParameterFromQuery]
    private System.Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        teamcontact = await context.TeamContact.FirstOrDefaultAsync(m => m.Id == Id);

        if (teamcontact is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteTeamContact()
    {
        using var context = DbFactory.CreateDbContext();
        context.TeamContact.Remove(teamcontact!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/teamcontacts");
    }
}
