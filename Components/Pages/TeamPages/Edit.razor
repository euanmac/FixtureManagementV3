@page "/teams/edit"

@inject IDbContextFactory<AppDBContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Team</h2>
<hr />
@if (Team is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Team" OnValidSubmit="UpdateTeam" FormName="edit" Enhance>
                
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Team.Id" value="@Team.Id" />
                
                <div class="mb-3">
                                <span class="text-danger">*</span>
                                <label for="name" class="form-label">Name:</label> 
                                <InputText id="name" @bind-Value="Team.Name" class="form-control" aria-required="true"/> 
                                <ValidationMessage For="() => Team.Name" class="text-danger" /> 
                </div>        
                <div class="mb-3">
                    <span class="text-danger">*</span>
                    <label for="agegroup" class="form-label">Age Group:</label> 
                    <InputSelect id="agegroup" @bind-Value="Team.AgeGroup" class="form-control" aria-required="true"> 
                        @foreach (var ag in Enum.GetValues(typeof(AgeGroup)))
                        {
                            <option value="@ag">@ag</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Team.AgeGroup" class="text-danger" /> 
                </div>        
                <div class="mb-3">
                    <label for="gender" class="form-label">Gender:</label> 
                    <InputSelect @bind-Value="Team.Gender" class="form-control" aria-required="true"> 
                        @foreach (var gender in Enum.GetValues(typeof(Gender)))
                        {
                            <option value="@gender">@gender</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Team.Gender" class="text-danger" /> 
                </div>        
                <div class="mb-3">
                    <label for="league" class="form-label">League:</label> 
                    <InputSelect @bind-Value="Team.League" class="form-control" aria-required="true"> 
                        @foreach (var league in Enum.GetValues(typeof(League)))
                        {
                            <option value="@league">@league</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Team.League" class="text-danger" /> 
                </div>        
                <div class="mb-3">
                    <label for="division" class="form-label">Division:</label> 
                    <InputSelect @bind-Value="Team.Division" class="form-control" aria-required="true"> 
                        @foreach (var division in Enum.GetValues(typeof(Division)))
                        {
                            <option value="@division">@division</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Team.Division" class="text-danger" /> 
                </div>        
                <div class="mb-3">
                    <label for="fulltimeteamid" class="form-label">FullTimeTeamId:</label> 
                    <InputText id="fulltimeteamid" @bind-Value="Team.FullTimeTeamId" class="form-control" /> 
                    <ValidationMessage For="() => Team.FullTimeTeamId" class="text-danger" /> 
                </div>        
                <div class="mb-3">
                    <label for="fulltimeleagueid" class="form-label">FullTimeLeagueId:</label> 
                    <InputText id="fulltimeleagueid" @bind-Value="Team.FullTimeLeagueId" class="form-control" /> 
                    <ValidationMessage For="() => Team.FullTimeLeagueId" class="text-danger" /> 
                </div>           
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/teams">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private System.Guid Id { get; set; }

    [SupplyParameterFromForm]
    private Team? Team { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Team ??= await context.Team.FirstOrDefaultAsync(m => m.Id == Id);
        
        if (Team is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateTeam()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Team!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!TeamExists(Team!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/teams");
    }

    private bool TeamExists(System.Guid id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Team.Any(e => e.Id == id);
    }
}
