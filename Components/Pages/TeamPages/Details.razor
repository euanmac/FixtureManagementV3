@page "/teams/details"
@preservewhitespace true
@using Microsoft.EntityFrameworkCore
@using FixtureManagementV3.Models
@using FixtureManagementV3.ViewModels
@using FixtureManagementV3.Components.Helper
@using FixtureManagementV3.Data
@using System.ComponentModel.DataAnnotations
@inject IDbContextFactory<AppDBContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    @if (team is null)
    {
        <h2>Team</h2>
        <hr />
        <p><em>Loading...</em></p>
    }
    else {
        <hr />
            <h3>@team!.DisplayName</h3>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">Gender</dt>
            <dd class="col-sm-4">@team.Gender</dd>
            <dt class="col-sm-2">Age Group</dt>
            <dd class="col-sm-4">@team.GroupDescription</dd>
            <dt class="col-sm-2">League</dt>
            @if (team.FixtureURL.Length > 0) {
                <dd class="col-sm-4"><a href="@team.FixtureURL">@(Utilities.GetAttributeOfType<DisplayAttribute>(@team.League)!.Name ?? "")</a></dd>
            } else {
                <dd class="col-sm-4">@(Utilities.GetAttributeOfType<DisplayAttribute>(@team.League)!.Name ?? "")</dd>
            }
            <dt class="col-sm-2">Match Day</dt>
            <dd class="col-sm-4">@team.MatchDay</dd>
            <dt class="col-sm-2">Division</dt>
            <dd class="col-sm-10">@team.Division</dd>

                @foreach (var tcType in teamContactGroupedByType.Keys)
                {
                    var tcTypeString = tcType.ToString() + (teamContactGroupedByType[tcType].Count > 1 ? "s" : ""); 
                    <dt class="col-sm-2">@tcTypeString</dt>
                    <dd class="col-sm-10">
                    @foreach (var (index, item) in teamContactGroupedByType[tcType].Index())
                    {
                        var formName = $"{tcType}{index}";
                        <EditForm method="post" Model="item" OnSubmit="RemoveContact" FormName="@formName" Enhance>
                        <input type="hidden" name="teamContactToRemove.Id" value="@item.Id" />
                        <input type="hidden" name="teamContactToRemove.PersonId" value="@item.PersonId" />
                        <input type="hidden" name="teamContactToRemove.TeamId" value="@item.TeamId" />
                        <input type="hidden" name="teamContactToRemove.ContactType" value="@item.ContactType" />

                        @if (isAuthenticated)
                        {
                            <span>
                                @item.Person!.FullName
                                (<a href="mailto:@item.Person.Email">@item.Person.Email</a>)
                                <button type="submit" style="border: none; background-color: transparent" class="btn-link">
                                    <Icon Type="Icon.IconType.Delete"/>     
                                </button>
                            </span>
                        }
                        else
                        {
                            <dd class="col-sm-4">
                                @item!.Person!.FullName
                            </dd>
                        }
                        </EditForm>
                    }
                    </dd>
                }
        </dl>
        <div>
            @if (isAuthenticated) {
                <a class="btn btn-primary btn mr-2" href="@($"/teams/edit?id={team.Id}")">Edit Team</a>
                <a class="btn btn-primary btn mr-2" href="@($"/fixtures/create?teamid={team.Id}")">Add Fixture</a>
                <a class="btn btn-primary btn mr-2 " href="@($"/teamcontacts/create?teamid={team.Id}")">Add Contact</a>
                <a class="btn btn-primary btn mr-2" href="@($"/fixtures/upload?teamid={team.Id}")">Upload</a>
                <form method="post" @onsubmit="DeleteFixtures" class="d-inline" @formname="DeleteFixtures" enhance>
                    <button type="submit" class="btn btn-danger btn mr-2" onclick="return confirm('Are you sure you want to delete all fixtures?')">Delete Fixtures</button>
                    <AntiforgeryToken />
                    <input type="hidden" name="DeleteFixturesId" value="@team.Id" />
                </form>
            }  
            <a href="#" onclick="history.back()" class="btn btn btn-secondary">Back</a>
        </div>
        <br>
        <FixtureGrid CanEdit="@isAuthenticated" Fixtures="@fixture" TeamHidden="true"/>
    }
</div>

@code {
    private Team? team;
    private IQueryable<FixtureViewModel> fixture = default!; 
    [SupplyParameterFromQuery]
    private System.Guid Id { get; set; }
    [SupplyParameterFromForm(FormName = "DeleteFixtures")]
    private System.Guid DeleteFixturesId { get; set; }
    private bool isAuthenticated = false;
    private Dictionary<ContactType, List<TeamContact>> teamContactGroupedByType { get; set; } = default!;
 

    [SupplyParameterFromForm]
    private TeamContact? teamContactToRemove {get; set;}

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = (user.Identity is not null && user.Identity.IsAuthenticated);

        using var context = DbFactory.CreateDbContext();
        fixture = (await context.Fixture
                .Include(f => f.Team)
                .Include(f => f.FixtureAllocation)
                    .ThenInclude(fa => fa!.Pitch)
                .OrderBy(f => f.Date)
                    .ThenBy(f => f.Team!.AgeGroup)
                .Where(f => f.TeamId == Id)
                .ToListAsync())
                .Select(f => new FixtureViewModel(f, true))
                .AsQueryable();
        team = await context.Team
                .Include(t => t.Contacts)
                    .ThenInclude(c => c.Person)
                .Where(t => t.Id == Id)
                .FirstOrDefaultAsync(m => m.Id == Id);

        if (team is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        teamContactGroupedByType = team!.Contacts.GroupBy(tc => tc.ContactType).ToDictionary(g => g.Key, g => g.ToList());

    }

    
    private async Task RemoveContact()
    {
        if (teamContactToRemove is not null)
        {
            using var context = DbFactory.CreateDbContext();
            context.TeamContact.Remove(teamContactToRemove);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }

    private async Task DeleteFixtures()
    {
        using var context = DbFactory.CreateDbContext();
        var fixtures = context.Fixture.Where(f => f.TeamId == DeleteFixturesId);
        context.Fixture.RemoveRange(fixtures);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}