@page "/teams/create"

@inject IDbContextFactory<AppDBContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Create</PageTitle>

<h1>Add</h1>

<h2>Team</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Team" OnValidSubmit="AddTeam" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <div class="mb-3 form-floating">
                <InputText id="name" @bind-Value="Team.Name" class="form-control" aria-required="true"/> 
                <label for="name" class="form-label">Name:</label> 
                <ValidationMessage For="() => Team.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3 form-floating">
                <InputSelect id="agegroup" @bind-Value="Team.AgeGroup" class="form-control form-select" aria-required="true"> 
                    @foreach (var ag in Enum.GetValues(typeof(AgeGroup)))
                    {
                        <option value="@ag">@ag</option>
                    }
                </InputSelect>
                <label for="agegroup" class="form-label">Age Group</label> 
                <ValidationMessage For="() => Team.AgeGroup" class="text-danger" /> 
            </div>        
            <div class="mb-3 form-floating">
                <InputSelect @bind-Value="Team.Gender" class="form-control form-select" aria-required="true"> 
                    @foreach (var gender in Enum.GetValues(typeof(Gender)))
                    {
                        <option value="@gender">@gender</option>
                    }
                </InputSelect>
                <label for="gender" class="form-label">Gender</label> 
                <ValidationMessage For="() => Team.Gender" class="text-danger" /> 
            </div>        
            <div class="mb-3 form-floating">
                <InputSelect @bind-Value="Team.League" class="form-control form-select" aria-required="true"> 
                    @foreach (var league in Enum.GetValues(typeof(League)))
                    {
                        <option value="@league">@league</option>
                    }
                </InputSelect>
                <label for="league" class="form-label">League:</label> 
                <ValidationMessage For="() => Team.League" class="text-danger" /> 
            </div>        
            <div class="mb-3 form-floating">
                <InputSelect @bind-Value="Team.Division" class="form-control form-select" aria-required="true"> 
                    @foreach (var division in Enum.GetValues(typeof(Division)))
                    {
                        <option value="@division">@division</option>
                    }
                </InputSelect>
                <label for="division" class="form-label">Division:</label> 
                <ValidationMessage For="() => Team.Division" class="text-danger" /> 
            </div>        
            <div class="mb-3 form-floating">
                <InputText id="fulltimeteamid" @bind-Value="Team.FullTimeTeamId" class="form-control" /> 
                <label for="fulltimeteamid" class="form-label">FullTime Team Id</label> 
                <ValidationMessage For="() => Team.FullTimeTeamId" class="text-danger" /> 
            </div>        
            <div class="mb-3 form-floating">
                <InputText id="fulltimeleagueid" @bind-Value="Team.FullTimeLeagueId" class="form-control" /> 
                <label for="fulltimeleagueid" class="form-label">FullTime League Id</label>
                <ValidationMessage For="() => Team.FullTimeLeagueId" class="text-danger" /> 
            </div>           
            <button type="submit" class="btn btn-primary">Create</button>
            <a href="#" onclick="history.back()" class="btn btn btn-secondary">Back</a>
        </EditForm>
    </div>
</div>

<div>
</div>

@code {
    [SupplyParameterFromForm]
    private Team Team { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddTeam()
    {
        using var context = DbFactory.CreateDbContext();
        context.Team.Add(Team);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/teams");
    }
}
